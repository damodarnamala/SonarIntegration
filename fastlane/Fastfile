default_platform(:ios)
platform :ios do
  desc "Running `lizard`"
  lane :runLizard do
    lizard(
      source_folder: "Source",
      language: "swift",
      export_type: "html",
      report_file: "Reports/Lizard/Report.html",
      sorting:"cyclomatic_complexity"
    )
  end
  desc "Running `Swiftlint`"
  lane :runlint do |options|
    executable = sh "which swiftlint|tr -d '\n'"
    puts "Found 'swiftlint' at: " + executable
    defaults = {
      mode: :lint,
      config_file: ".swiftlint.yml",
      executable: executable,
      path: "Source",
      reporter: "html",
      output_file: "./Reports/SwiftLint/Report.html",
    }.freeze

    swiftlint(defaults.merge(options))
    puts "Failed running swiftlint"
  end

  desc "Running `XCov`"

  lane :runXCov do |options|
    sh('rm -r "../Reports/XCov"')

    defaults = {
      project: "CleanSecond.xcodeproj",
      scheme: "CleanSecond",
      configuration: "Debug",
      source_directory: "Source",
      output_directory: "Reports/XCov",
      html_report: true,
    }.freeze

    xcov(defaults.merge(options))
  end

  lane :runMetrics do |options|
    scan(scheme: "CleanSecond",
         code_coverage: true,
         derived_data_path: "./DerivedData",
         output_directory: "./Reports/Sonar",
         devices: "iPhone 14 Pro")

    slather(cobertura_xml: true,
            jenkins: true,
            scheme: "CleanSecond",
            build_directory: "./DerivedData",
            output_directory: "./Reports/Sonar",
            proj: "CleanSecond.xcodeproj")

    swiftlint(output_file: "./Reports/Sonar/swiftlint.txt",
              ignore_exit_status: true)
    sonar
  end

end